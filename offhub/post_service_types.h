/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef post_service_TYPES_H
#define post_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "meeting_broadcast_types.h"


namespace lj {

struct EventType {
  enum type {
    FORWARD = 0,
    COMMENT = 1,
    ZAN = 2,
    ZAN_CANCEL = 3
  };
};

extern const std::map<int, const char*> _EventType_VALUES_TO_NAMES;

class PostServiceRequest;

class EventServiceRequest;

class FollowEvent;

typedef struct _PostServiceRequest__isset {
  _PostServiceRequest__isset() : tid(false), uid(false), industry(false), title(true), content(false), ctime(false), parent_tid(true), origin_tid(true), is_essence(true), img(true) {}
  bool tid :1;
  bool uid :1;
  bool industry :1;
  bool title :1;
  bool content :1;
  bool ctime :1;
  bool parent_tid :1;
  bool origin_tid :1;
  bool is_essence :1;
  bool img :1;
} _PostServiceRequest__isset;

class PostServiceRequest {
 public:

  static const char* ascii_fingerprint; // = "0A6B2A0D86A51712CCE4F59EFDE6D453";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x6B,0x2A,0x0D,0x86,0xA5,0x17,0x12,0xCC,0xE4,0xF5,0x9E,0xFD,0xE6,0xD4,0x53};

  PostServiceRequest(const PostServiceRequest&);
  PostServiceRequest& operator=(const PostServiceRequest&);
  PostServiceRequest() : tid(0), uid(0), industry(), title(""), content(), ctime(0), parent_tid(-1), origin_tid(-1), is_essence(0), img("") {
  }

  virtual ~PostServiceRequest() throw();
  int32_t tid;
  int32_t uid;
  std::string industry;
  std::string title;
  std::string content;
  int64_t ctime;
  int32_t parent_tid;
  int32_t origin_tid;
  int32_t is_essence;
  std::string img;

  _PostServiceRequest__isset __isset;

  void __set_tid(const int32_t val);

  void __set_uid(const int32_t val);

  void __set_industry(const std::string& val);

  void __set_title(const std::string& val);

  void __set_content(const std::string& val);

  void __set_ctime(const int64_t val);

  void __set_parent_tid(const int32_t val);

  void __set_origin_tid(const int32_t val);

  void __set_is_essence(const int32_t val);

  void __set_img(const std::string& val);

  bool operator == (const PostServiceRequest & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(industry == rhs.industry))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(ctime == rhs.ctime))
      return false;
    if (!(parent_tid == rhs.parent_tid))
      return false;
    if (!(origin_tid == rhs.origin_tid))
      return false;
    if (!(is_essence == rhs.is_essence))
      return false;
    if (!(img == rhs.img))
      return false;
    return true;
  }
  bool operator != (const PostServiceRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostServiceRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PostServiceRequest& obj);
};

void swap(PostServiceRequest &a, PostServiceRequest &b);


class EventServiceRequest {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  EventServiceRequest(const EventServiceRequest&);
  EventServiceRequest& operator=(const EventServiceRequest&);
  EventServiceRequest() : type((EventType::type)0), tid(0) {
  }

  virtual ~EventServiceRequest() throw();
  EventType::type type;
  int32_t tid;

  void __set_type(const EventType::type val);

  void __set_tid(const int32_t val);

  bool operator == (const EventServiceRequest & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(tid == rhs.tid))
      return false;
    return true;
  }
  bool operator != (const EventServiceRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EventServiceRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const EventServiceRequest& obj);
};

void swap(EventServiceRequest &a, EventServiceRequest &b);


class FollowEvent {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  FollowEvent(const FollowEvent&);
  FollowEvent& operator=(const FollowEvent&);
  FollowEvent() : uid(0), follower_uid(0) {
  }

  virtual ~FollowEvent() throw();
  int32_t uid;
  int32_t follower_uid;

  void __set_uid(const int32_t val);

  void __set_follower_uid(const int32_t val);

  bool operator == (const FollowEvent & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(follower_uid == rhs.follower_uid))
      return false;
    return true;
  }
  bool operator != (const FollowEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FollowEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FollowEvent& obj);
};

void swap(FollowEvent &a, FollowEvent &b);

} // namespace

#endif
