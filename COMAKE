#edit-mode: -*- python -*-
#coding:utf8

#google code generator, 如果源码里面有proto文件则需要指定
PROTOC('../protobuf/bin/protoc')

#thrift code generator, 如果源码里面有thrift文件则需要指定
THRIFT('../thrift/bin/thrift')

#编译器
CXX('g++')

#g++参数
enable_profiling=False
if enable_profiling:
    CXXFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -D_USE_PROF -g -pipe -W -Wall -fPIC -std=c++11')
    LDFLAGS('-lcrypto -ldl -lpthread -lm -lrt -lunwind')
else:
    CXXFLAGS('-D_GNU_SOURCE -D__STDC_LIMIT_MACROS -g -pipe -W -Wall -fPIC -std=c++11')
    LDFLAGS('-lcrypto -ldl -lpthread -lm -lrt')

#链接参数
#LDFLAGS('-lcrypto -ldl -lpthread -lm -lrt -lunwind')

#设置额外的include path，默认为./和每个模块的xx/include, xxx/output/include
INCLUDE(GLOB('./'))

#指定编译额外依赖的静态库路径
DEP_LIB(GLOB('./lib/*.a'))

#指定依赖的模块
DEP('gflags', '1.0.0')
DEP('protobuf_old', '1.0.0')
DEP('glog', '1.0.0')

sources = GLOB('ae/ae.c ae/anet.c *.cpp handler/*.cpp offhub/*.thrift offhub/*.cpp monitor/*.cpp')
fake_client_sources = GLOB('tool/fake_client.cpp ae/anet.c common.cpp protocol.cpp communication.cpp')
drop_client_sources = GLOB('tool/drop_client.cpp ae/anet.c common.cpp protocol.cpp communication.cpp')
fake_pusher_sources = GLOB('tool/fake_pusher.cpp ae/anet.c common.cpp protocol.cpp communication.cpp')
#test_sources = GLOB('offhub/*.thrift test/test.cpp')
#需要产出的bin, 产出目录./output/bin/
APP('seiya', sources)
APP('fake_client', fake_client_sources)
APP('drop_client', drop_client_sources)
APP('fake_pusher', fake_pusher_sources)
#传出的静态库, 产出目录./output/lib ./output/include
#STATIC_LIB('liba.a', sources, headers)

#指定output目录
OUTPUT('output')

