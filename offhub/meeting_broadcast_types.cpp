/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "meeting_broadcast_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace lj {


UserOnOfflineRequest::~UserOnOfflineRequest() throw() {
}


void UserOnOfflineRequest::__set_uid(const int32_t val) {
  this->uid = val;
}

void UserOnOfflineRequest::__set_operate_type(const int32_t val) {
  this->operate_type = val;
}

void UserOnOfflineRequest::__set_meeting_id(const int32_t val) {
  this->meeting_id = val;
}

void UserOnOfflineRequest::__set_ctime(const int64_t val) {
  this->ctime = val;
}

const char* UserOnOfflineRequest::ascii_fingerprint = "2E8F302A6C4CB69C9302BBFE3E138479";
const uint8_t UserOnOfflineRequest::binary_fingerprint[16] = {0x2E,0x8F,0x30,0x2A,0x6C,0x4C,0xB6,0x9C,0x93,0x02,0xBB,0xFE,0x3E,0x13,0x84,0x79};

uint32_t UserOnOfflineRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->operate_type);
          this->__isset.operate_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->meeting_id);
          this->__isset.meeting_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ctime);
          this->__isset.ctime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserOnOfflineRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserOnOfflineRequest");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("operate_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->operate_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meeting_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->meeting_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ctime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->ctime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserOnOfflineRequest &a, UserOnOfflineRequest &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.operate_type, b.operate_type);
  swap(a.meeting_id, b.meeting_id);
  swap(a.ctime, b.ctime);
  swap(a.__isset, b.__isset);
}

UserOnOfflineRequest::UserOnOfflineRequest(const UserOnOfflineRequest& other0) {
  uid = other0.uid;
  operate_type = other0.operate_type;
  meeting_id = other0.meeting_id;
  ctime = other0.ctime;
  __isset = other0.__isset;
}
UserOnOfflineRequest& UserOnOfflineRequest::operator=(const UserOnOfflineRequest& other1) {
  uid = other1.uid;
  operate_type = other1.operate_type;
  meeting_id = other1.meeting_id;
  ctime = other1.ctime;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserOnOfflineRequest& obj) {
  using apache::thrift::to_string;
  out << "UserOnOfflineRequest(";
  out << "uid=" << to_string(obj.uid);
  out << ", " << "operate_type=" << to_string(obj.operate_type);
  out << ", " << "meeting_id=" << to_string(obj.meeting_id);
  out << ", " << "ctime=" << to_string(obj.ctime);
  out << ")";
  return out;
}


TalkVoiceTranslationRequest::~TalkVoiceTranslationRequest() throw() {
}


void TalkVoiceTranslationRequest::__set_talk_id(const int32_t val) {
  this->talk_id = val;
}

void TalkVoiceTranslationRequest::__set_content(const std::string& val) {
  this->content = val;
}

void TalkVoiceTranslationRequest::__set_meeting_id(const int32_t val) {
  this->meeting_id = val;
}

void TalkVoiceTranslationRequest::__set_ctime(const int64_t val) {
  this->ctime = val;
}

const char* TalkVoiceTranslationRequest::ascii_fingerprint = "8B0EEE52FA3C4E56A652C27E072C79BB";
const uint8_t TalkVoiceTranslationRequest::binary_fingerprint[16] = {0x8B,0x0E,0xEE,0x52,0xFA,0x3C,0x4E,0x56,0xA6,0x52,0xC2,0x7E,0x07,0x2C,0x79,0xBB};

uint32_t TalkVoiceTranslationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->talk_id);
          this->__isset.talk_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->meeting_id);
          this->__isset.meeting_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ctime);
          this->__isset.ctime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TalkVoiceTranslationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TalkVoiceTranslationRequest");

  xfer += oprot->writeFieldBegin("talk_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->talk_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meeting_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->meeting_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ctime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->ctime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TalkVoiceTranslationRequest &a, TalkVoiceTranslationRequest &b) {
  using ::std::swap;
  swap(a.talk_id, b.talk_id);
  swap(a.content, b.content);
  swap(a.meeting_id, b.meeting_id);
  swap(a.ctime, b.ctime);
  swap(a.__isset, b.__isset);
}

TalkVoiceTranslationRequest::TalkVoiceTranslationRequest(const TalkVoiceTranslationRequest& other2) {
  talk_id = other2.talk_id;
  content = other2.content;
  meeting_id = other2.meeting_id;
  ctime = other2.ctime;
  __isset = other2.__isset;
}
TalkVoiceTranslationRequest& TalkVoiceTranslationRequest::operator=(const TalkVoiceTranslationRequest& other3) {
  talk_id = other3.talk_id;
  content = other3.content;
  meeting_id = other3.meeting_id;
  ctime = other3.ctime;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TalkVoiceTranslationRequest& obj) {
  using apache::thrift::to_string;
  out << "TalkVoiceTranslationRequest(";
  out << "talk_id=" << to_string(obj.talk_id);
  out << ", " << "content=" << to_string(obj.content);
  out << ", " << "meeting_id=" << to_string(obj.meeting_id);
  out << ", " << "ctime=" << to_string(obj.ctime);
  out << ")";
  return out;
}


UserRoleChangedRequest::~UserRoleChangedRequest() throw() {
}


void UserRoleChangedRequest::__set_uid(const int32_t val) {
  this->uid = val;
}

void UserRoleChangedRequest::__set_role(const int32_t val) {
  this->role = val;
}

void UserRoleChangedRequest::__set_meeting_id(const int32_t val) {
  this->meeting_id = val;
}

void UserRoleChangedRequest::__set_ctime(const int64_t val) {
  this->ctime = val;
}

const char* UserRoleChangedRequest::ascii_fingerprint = "2E8F302A6C4CB69C9302BBFE3E138479";
const uint8_t UserRoleChangedRequest::binary_fingerprint[16] = {0x2E,0x8F,0x30,0x2A,0x6C,0x4C,0xB6,0x9C,0x93,0x02,0xBB,0xFE,0x3E,0x13,0x84,0x79};

uint32_t UserRoleChangedRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->role);
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->meeting_id);
          this->__isset.meeting_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ctime);
          this->__isset.ctime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserRoleChangedRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserRoleChangedRequest");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->role);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meeting_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->meeting_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ctime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->ctime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserRoleChangedRequest &a, UserRoleChangedRequest &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.role, b.role);
  swap(a.meeting_id, b.meeting_id);
  swap(a.ctime, b.ctime);
  swap(a.__isset, b.__isset);
}

UserRoleChangedRequest::UserRoleChangedRequest(const UserRoleChangedRequest& other4) {
  uid = other4.uid;
  role = other4.role;
  meeting_id = other4.meeting_id;
  ctime = other4.ctime;
  __isset = other4.__isset;
}
UserRoleChangedRequest& UserRoleChangedRequest::operator=(const UserRoleChangedRequest& other5) {
  uid = other5.uid;
  role = other5.role;
  meeting_id = other5.meeting_id;
  ctime = other5.ctime;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserRoleChangedRequest& obj) {
  using apache::thrift::to_string;
  out << "UserRoleChangedRequest(";
  out << "uid=" << to_string(obj.uid);
  out << ", " << "role=" << to_string(obj.role);
  out << ", " << "meeting_id=" << to_string(obj.meeting_id);
  out << ", " << "ctime=" << to_string(obj.ctime);
  out << ")";
  return out;
}


TalkingInfo::~TalkingInfo() throw() {
}


void TalkingInfo::__set_talk_id(const int32_t val) {
  this->talk_id = val;
}

void TalkingInfo::__set_display_position(const int32_t val) {
  this->display_position = val;
}

void TalkingInfo::__set_info_type(const int32_t val) {
  this->info_type = val;
}

void TalkingInfo::__set_content(const std::string& val) {
  this->content = val;
}

void TalkingInfo::__set_ctime(const int64_t val) {
  this->ctime = val;
}

void TalkingInfo::__set_height(const int32_t val) {
  this->height = val;
}

void TalkingInfo::__set_width(const int32_t val) {
  this->width = val;
}

void TalkingInfo::__set_audio_format(const std::string& val) {
  this->audio_format = val;
}

void TalkingInfo::__set_audio_duration(const int32_t val) {
  this->audio_duration = val;
}

void TalkingInfo::__set_is_question(const bool val) {
  this->is_question = val;
}

const char* TalkingInfo::ascii_fingerprint = "DE5350DA313EF2D56C7A76049B1145EC";
const uint8_t TalkingInfo::binary_fingerprint[16] = {0xDE,0x53,0x50,0xDA,0x31,0x3E,0xF2,0xD5,0x6C,0x7A,0x76,0x04,0x9B,0x11,0x45,0xEC};

uint32_t TalkingInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->talk_id);
          this->__isset.talk_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->display_position);
          this->__isset.display_position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->info_type);
          this->__isset.info_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ctime);
          this->__isset.ctime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->audio_format);
          this->__isset.audio_format = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->audio_duration);
          this->__isset.audio_duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_question);
          this->__isset.is_question = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TalkingInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TalkingInfo");

  xfer += oprot->writeFieldBegin("talk_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->talk_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("display_position", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->display_position);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->info_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ctime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->ctime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_format", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->audio_format);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("audio_duration", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->audio_duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_question", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->is_question);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TalkingInfo &a, TalkingInfo &b) {
  using ::std::swap;
  swap(a.talk_id, b.talk_id);
  swap(a.display_position, b.display_position);
  swap(a.info_type, b.info_type);
  swap(a.content, b.content);
  swap(a.ctime, b.ctime);
  swap(a.height, b.height);
  swap(a.width, b.width);
  swap(a.audio_format, b.audio_format);
  swap(a.audio_duration, b.audio_duration);
  swap(a.is_question, b.is_question);
  swap(a.__isset, b.__isset);
}

TalkingInfo::TalkingInfo(const TalkingInfo& other6) {
  talk_id = other6.talk_id;
  display_position = other6.display_position;
  info_type = other6.info_type;
  content = other6.content;
  ctime = other6.ctime;
  height = other6.height;
  width = other6.width;
  audio_format = other6.audio_format;
  audio_duration = other6.audio_duration;
  is_question = other6.is_question;
  __isset = other6.__isset;
}
TalkingInfo& TalkingInfo::operator=(const TalkingInfo& other7) {
  talk_id = other7.talk_id;
  display_position = other7.display_position;
  info_type = other7.info_type;
  content = other7.content;
  ctime = other7.ctime;
  height = other7.height;
  width = other7.width;
  audio_format = other7.audio_format;
  audio_duration = other7.audio_duration;
  is_question = other7.is_question;
  __isset = other7.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TalkingInfo& obj) {
  using apache::thrift::to_string;
  out << "TalkingInfo(";
  out << "talk_id=" << to_string(obj.talk_id);
  out << ", " << "display_position=" << to_string(obj.display_position);
  out << ", " << "info_type=" << to_string(obj.info_type);
  out << ", " << "content=" << to_string(obj.content);
  out << ", " << "ctime=" << to_string(obj.ctime);
  out << ", " << "height=" << to_string(obj.height);
  out << ", " << "width=" << to_string(obj.width);
  out << ", " << "audio_format=" << to_string(obj.audio_format);
  out << ", " << "audio_duration=" << to_string(obj.audio_duration);
  out << ", " << "is_question=" << to_string(obj.is_question);
  out << ")";
  return out;
}


UserInfo::~UserInfo() throw() {
}


void UserInfo::__set_uid(const int32_t val) {
  this->uid = val;
}

void UserInfo::__set_role(const int32_t val) {
  this->role = val;
}

void UserInfo::__set_avatar(const std::string& val) {
  this->avatar = val;
}

void UserInfo::__set_sname(const std::string& val) {
  this->sname = val;
}

const char* UserInfo::ascii_fingerprint = "9A907BD0092CBBA78E0613C3C8249BD3";
const uint8_t UserInfo::binary_fingerprint[16] = {0x9A,0x90,0x7B,0xD0,0x09,0x2C,0xBB,0xA7,0x8E,0x06,0x13,0xC3,0xC8,0x24,0x9B,0xD3};

uint32_t UserInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->role);
          this->__isset.role = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->avatar);
          this->__isset.avatar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sname);
          this->__isset.sname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserInfo");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->role);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("avatar", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->avatar);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sname", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->sname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserInfo &a, UserInfo &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.role, b.role);
  swap(a.avatar, b.avatar);
  swap(a.sname, b.sname);
  swap(a.__isset, b.__isset);
}

UserInfo::UserInfo(const UserInfo& other8) {
  uid = other8.uid;
  role = other8.role;
  avatar = other8.avatar;
  sname = other8.sname;
  __isset = other8.__isset;
}
UserInfo& UserInfo::operator=(const UserInfo& other9) {
  uid = other9.uid;
  role = other9.role;
  avatar = other9.avatar;
  sname = other9.sname;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserInfo& obj) {
  using apache::thrift::to_string;
  out << "UserInfo(";
  out << "uid=" << to_string(obj.uid);
  out << ", " << "role=" << to_string(obj.role);
  out << ", " << "avatar=" << to_string(obj.avatar);
  out << ", " << "sname=" << to_string(obj.sname);
  out << ")";
  return out;
}


UserTalkingRequest::~UserTalkingRequest() throw() {
}


void UserTalkingRequest::__set_talking_info(const TalkingInfo& val) {
  this->talking_info = val;
}

void UserTalkingRequest::__set_user_info(const UserInfo& val) {
  this->user_info = val;
}

void UserTalkingRequest::__set_meeting_id(const int32_t val) {
  this->meeting_id = val;
}

const char* UserTalkingRequest::ascii_fingerprint = "0936D657761BD36BB82FD0D773E72BB1";
const uint8_t UserTalkingRequest::binary_fingerprint[16] = {0x09,0x36,0xD6,0x57,0x76,0x1B,0xD3,0x6B,0xB8,0x2F,0xD0,0xD7,0x73,0xE7,0x2B,0xB1};

uint32_t UserTalkingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->talking_info.read(iprot);
          this->__isset.talking_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->user_info.read(iprot);
          this->__isset.user_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->meeting_id);
          this->__isset.meeting_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserTalkingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("UserTalkingRequest");

  xfer += oprot->writeFieldBegin("talking_info", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->talking_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->user_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meeting_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->meeting_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(UserTalkingRequest &a, UserTalkingRequest &b) {
  using ::std::swap;
  swap(a.talking_info, b.talking_info);
  swap(a.user_info, b.user_info);
  swap(a.meeting_id, b.meeting_id);
  swap(a.__isset, b.__isset);
}

UserTalkingRequest::UserTalkingRequest(const UserTalkingRequest& other10) {
  talking_info = other10.talking_info;
  user_info = other10.user_info;
  meeting_id = other10.meeting_id;
  __isset = other10.__isset;
}
UserTalkingRequest& UserTalkingRequest::operator=(const UserTalkingRequest& other11) {
  talking_info = other11.talking_info;
  user_info = other11.user_info;
  meeting_id = other11.meeting_id;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const UserTalkingRequest& obj) {
  using apache::thrift::to_string;
  out << "UserTalkingRequest(";
  out << "talking_info=" << to_string(obj.talking_info);
  out << ", " << "user_info=" << to_string(obj.user_info);
  out << ", " << "meeting_id=" << to_string(obj.meeting_id);
  out << ")";
  return out;
}


ConnectOnOfflineRequest::~ConnectOnOfflineRequest() throw() {
}


void ConnectOnOfflineRequest::__set_connect_id(const int64_t val) {
  this->connect_id = val;
}

void ConnectOnOfflineRequest::__set_status(const int32_t val) {
  this->status = val;
}

const char* ConnectOnOfflineRequest::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t ConnectOnOfflineRequest::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t ConnectOnOfflineRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->connect_id);
          this->__isset.connect_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConnectOnOfflineRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ConnectOnOfflineRequest");

  xfer += oprot->writeFieldBegin("connect_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->connect_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ConnectOnOfflineRequest &a, ConnectOnOfflineRequest &b) {
  using ::std::swap;
  swap(a.connect_id, b.connect_id);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

ConnectOnOfflineRequest::ConnectOnOfflineRequest(const ConnectOnOfflineRequest& other12) {
  connect_id = other12.connect_id;
  status = other12.status;
  __isset = other12.__isset;
}
ConnectOnOfflineRequest& ConnectOnOfflineRequest::operator=(const ConnectOnOfflineRequest& other13) {
  connect_id = other13.connect_id;
  status = other13.status;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ConnectOnOfflineRequest& obj) {
  using apache::thrift::to_string;
  out << "ConnectOnOfflineRequest(";
  out << "connect_id=" << to_string(obj.connect_id);
  out << ", " << "status=" << to_string(obj.status);
  out << ")";
  return out;
}

} // namespace
