/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef meeting_broadcast_TYPES_H
#define meeting_broadcast_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace lj {

class UserOnOfflineRequest;

class TalkVoiceTranslationRequest;

class UserRoleChangedRequest;

class TalkingInfo;

class UserInfo;

class UserTalkingRequest;

class ConnectOnOfflineRequest;

typedef struct _UserOnOfflineRequest__isset {
  _UserOnOfflineRequest__isset() : uid(false), operate_type(false), meeting_id(false), ctime(false) {}
  bool uid :1;
  bool operate_type :1;
  bool meeting_id :1;
  bool ctime :1;
} _UserOnOfflineRequest__isset;

class UserOnOfflineRequest {
 public:

  static const char* ascii_fingerprint; // = "2E8F302A6C4CB69C9302BBFE3E138479";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0x8F,0x30,0x2A,0x6C,0x4C,0xB6,0x9C,0x93,0x02,0xBB,0xFE,0x3E,0x13,0x84,0x79};

  UserOnOfflineRequest(const UserOnOfflineRequest&);
  UserOnOfflineRequest& operator=(const UserOnOfflineRequest&);
  UserOnOfflineRequest() : uid(0), operate_type(0), meeting_id(0), ctime(0) {
  }

  virtual ~UserOnOfflineRequest() throw();
  int32_t uid;
  int32_t operate_type;
  int32_t meeting_id;
  int64_t ctime;

  _UserOnOfflineRequest__isset __isset;

  void __set_uid(const int32_t val);

  void __set_operate_type(const int32_t val);

  void __set_meeting_id(const int32_t val);

  void __set_ctime(const int64_t val);

  bool operator == (const UserOnOfflineRequest & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(operate_type == rhs.operate_type))
      return false;
    if (!(meeting_id == rhs.meeting_id))
      return false;
    if (!(ctime == rhs.ctime))
      return false;
    return true;
  }
  bool operator != (const UserOnOfflineRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserOnOfflineRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserOnOfflineRequest& obj);
};

void swap(UserOnOfflineRequest &a, UserOnOfflineRequest &b);

typedef struct _TalkVoiceTranslationRequest__isset {
  _TalkVoiceTranslationRequest__isset() : talk_id(false), content(false), meeting_id(false), ctime(false) {}
  bool talk_id :1;
  bool content :1;
  bool meeting_id :1;
  bool ctime :1;
} _TalkVoiceTranslationRequest__isset;

class TalkVoiceTranslationRequest {
 public:

  static const char* ascii_fingerprint; // = "8B0EEE52FA3C4E56A652C27E072C79BB";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x0E,0xEE,0x52,0xFA,0x3C,0x4E,0x56,0xA6,0x52,0xC2,0x7E,0x07,0x2C,0x79,0xBB};

  TalkVoiceTranslationRequest(const TalkVoiceTranslationRequest&);
  TalkVoiceTranslationRequest& operator=(const TalkVoiceTranslationRequest&);
  TalkVoiceTranslationRequest() : talk_id(0), content(), meeting_id(0), ctime(0) {
  }

  virtual ~TalkVoiceTranslationRequest() throw();
  int32_t talk_id;
  std::string content;
  int32_t meeting_id;
  int64_t ctime;

  _TalkVoiceTranslationRequest__isset __isset;

  void __set_talk_id(const int32_t val);

  void __set_content(const std::string& val);

  void __set_meeting_id(const int32_t val);

  void __set_ctime(const int64_t val);

  bool operator == (const TalkVoiceTranslationRequest & rhs) const
  {
    if (!(talk_id == rhs.talk_id))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(meeting_id == rhs.meeting_id))
      return false;
    if (!(ctime == rhs.ctime))
      return false;
    return true;
  }
  bool operator != (const TalkVoiceTranslationRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkVoiceTranslationRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TalkVoiceTranslationRequest& obj);
};

void swap(TalkVoiceTranslationRequest &a, TalkVoiceTranslationRequest &b);

typedef struct _UserRoleChangedRequest__isset {
  _UserRoleChangedRequest__isset() : uid(false), role(false), meeting_id(false), ctime(false) {}
  bool uid :1;
  bool role :1;
  bool meeting_id :1;
  bool ctime :1;
} _UserRoleChangedRequest__isset;

class UserRoleChangedRequest {
 public:

  static const char* ascii_fingerprint; // = "2E8F302A6C4CB69C9302BBFE3E138479";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0x8F,0x30,0x2A,0x6C,0x4C,0xB6,0x9C,0x93,0x02,0xBB,0xFE,0x3E,0x13,0x84,0x79};

  UserRoleChangedRequest(const UserRoleChangedRequest&);
  UserRoleChangedRequest& operator=(const UserRoleChangedRequest&);
  UserRoleChangedRequest() : uid(0), role(0), meeting_id(0), ctime(0) {
  }

  virtual ~UserRoleChangedRequest() throw();
  int32_t uid;
  int32_t role;
  int32_t meeting_id;
  int64_t ctime;

  _UserRoleChangedRequest__isset __isset;

  void __set_uid(const int32_t val);

  void __set_role(const int32_t val);

  void __set_meeting_id(const int32_t val);

  void __set_ctime(const int64_t val);

  bool operator == (const UserRoleChangedRequest & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(meeting_id == rhs.meeting_id))
      return false;
    if (!(ctime == rhs.ctime))
      return false;
    return true;
  }
  bool operator != (const UserRoleChangedRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserRoleChangedRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserRoleChangedRequest& obj);
};

void swap(UserRoleChangedRequest &a, UserRoleChangedRequest &b);

typedef struct _TalkingInfo__isset {
  _TalkingInfo__isset() : talk_id(false), display_position(false), info_type(false), content(false), ctime(false), height(false), width(false), audio_format(false), audio_duration(false), is_question(false) {}
  bool talk_id :1;
  bool display_position :1;
  bool info_type :1;
  bool content :1;
  bool ctime :1;
  bool height :1;
  bool width :1;
  bool audio_format :1;
  bool audio_duration :1;
  bool is_question :1;
} _TalkingInfo__isset;

class TalkingInfo {
 public:

  static const char* ascii_fingerprint; // = "DE5350DA313EF2D56C7A76049B1145EC";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0x53,0x50,0xDA,0x31,0x3E,0xF2,0xD5,0x6C,0x7A,0x76,0x04,0x9B,0x11,0x45,0xEC};

  TalkingInfo(const TalkingInfo&);
  TalkingInfo& operator=(const TalkingInfo&);
  TalkingInfo() : talk_id(0), display_position(0), info_type(0), content(), ctime(0), height(0), width(0), audio_format(), audio_duration(0), is_question(0) {
  }

  virtual ~TalkingInfo() throw();
  int32_t talk_id;
  int32_t display_position;
  int32_t info_type;
  std::string content;
  int64_t ctime;
  int32_t height;
  int32_t width;
  std::string audio_format;
  int32_t audio_duration;
  bool is_question;

  _TalkingInfo__isset __isset;

  void __set_talk_id(const int32_t val);

  void __set_display_position(const int32_t val);

  void __set_info_type(const int32_t val);

  void __set_content(const std::string& val);

  void __set_ctime(const int64_t val);

  void __set_height(const int32_t val);

  void __set_width(const int32_t val);

  void __set_audio_format(const std::string& val);

  void __set_audio_duration(const int32_t val);

  void __set_is_question(const bool val);

  bool operator == (const TalkingInfo & rhs) const
  {
    if (!(talk_id == rhs.talk_id))
      return false;
    if (!(display_position == rhs.display_position))
      return false;
    if (!(info_type == rhs.info_type))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(ctime == rhs.ctime))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(audio_format == rhs.audio_format))
      return false;
    if (!(audio_duration == rhs.audio_duration))
      return false;
    if (!(is_question == rhs.is_question))
      return false;
    return true;
  }
  bool operator != (const TalkingInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TalkingInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TalkingInfo& obj);
};

void swap(TalkingInfo &a, TalkingInfo &b);

typedef struct _UserInfo__isset {
  _UserInfo__isset() : uid(false), role(false), avatar(false), sname(false) {}
  bool uid :1;
  bool role :1;
  bool avatar :1;
  bool sname :1;
} _UserInfo__isset;

class UserInfo {
 public:

  static const char* ascii_fingerprint; // = "9A907BD0092CBBA78E0613C3C8249BD3";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x90,0x7B,0xD0,0x09,0x2C,0xBB,0xA7,0x8E,0x06,0x13,0xC3,0xC8,0x24,0x9B,0xD3};

  UserInfo(const UserInfo&);
  UserInfo& operator=(const UserInfo&);
  UserInfo() : uid(0), role(0), avatar(), sname() {
  }

  virtual ~UserInfo() throw();
  int32_t uid;
  int32_t role;
  std::string avatar;
  std::string sname;

  _UserInfo__isset __isset;

  void __set_uid(const int32_t val);

  void __set_role(const int32_t val);

  void __set_avatar(const std::string& val);

  void __set_sname(const std::string& val);

  bool operator == (const UserInfo & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(role == rhs.role))
      return false;
    if (!(avatar == rhs.avatar))
      return false;
    if (!(sname == rhs.sname))
      return false;
    return true;
  }
  bool operator != (const UserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserInfo& obj);
};

void swap(UserInfo &a, UserInfo &b);

typedef struct _UserTalkingRequest__isset {
  _UserTalkingRequest__isset() : talking_info(false), user_info(false), meeting_id(false) {}
  bool talking_info :1;
  bool user_info :1;
  bool meeting_id :1;
} _UserTalkingRequest__isset;

class UserTalkingRequest {
 public:

  static const char* ascii_fingerprint; // = "0936D657761BD36BB82FD0D773E72BB1";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x36,0xD6,0x57,0x76,0x1B,0xD3,0x6B,0xB8,0x2F,0xD0,0xD7,0x73,0xE7,0x2B,0xB1};

  UserTalkingRequest(const UserTalkingRequest&);
  UserTalkingRequest& operator=(const UserTalkingRequest&);
  UserTalkingRequest() : meeting_id(0) {
  }

  virtual ~UserTalkingRequest() throw();
  TalkingInfo talking_info;
  UserInfo user_info;
  int32_t meeting_id;

  _UserTalkingRequest__isset __isset;

  void __set_talking_info(const TalkingInfo& val);

  void __set_user_info(const UserInfo& val);

  void __set_meeting_id(const int32_t val);

  bool operator == (const UserTalkingRequest & rhs) const
  {
    if (!(talking_info == rhs.talking_info))
      return false;
    if (!(user_info == rhs.user_info))
      return false;
    if (!(meeting_id == rhs.meeting_id))
      return false;
    return true;
  }
  bool operator != (const UserTalkingRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserTalkingRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserTalkingRequest& obj);
};

void swap(UserTalkingRequest &a, UserTalkingRequest &b);

typedef struct _ConnectOnOfflineRequest__isset {
  _ConnectOnOfflineRequest__isset() : connect_id(false), status(false) {}
  bool connect_id :1;
  bool status :1;
} _ConnectOnOfflineRequest__isset;

class ConnectOnOfflineRequest {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  ConnectOnOfflineRequest(const ConnectOnOfflineRequest&);
  ConnectOnOfflineRequest& operator=(const ConnectOnOfflineRequest&);
  ConnectOnOfflineRequest() : connect_id(0), status(0) {
  }

  virtual ~ConnectOnOfflineRequest() throw();
  int64_t connect_id;
  int32_t status;

  _ConnectOnOfflineRequest__isset __isset;

  void __set_connect_id(const int64_t val);

  void __set_status(const int32_t val);

  bool operator == (const ConnectOnOfflineRequest & rhs) const
  {
    if (!(connect_id == rhs.connect_id))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ConnectOnOfflineRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectOnOfflineRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ConnectOnOfflineRequest& obj);
};

void swap(ConnectOnOfflineRequest &a, ConnectOnOfflineRequest &b);

} // namespace

#endif
